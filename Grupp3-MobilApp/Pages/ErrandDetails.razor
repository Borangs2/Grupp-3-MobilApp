@page "/ErrandDetails"
@page "/ErrandDetails/{ErrandId}"
@using Grupp3_MobilApp.Services
@using Grupp3_MobilApp.Models
@using Grupp3_MobilApp.ViewModels
@inject IErrandService ErrandService;
@inject ICommentService CommentService;
@inject ITechnicianService TechnicianService;
@inject NavigationManager Navigation;

<h3>Errand Details</h3>

@if (_errand == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <button @onclick="ReturnToMyErrands">Back</button>
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Last edited</th>
                    <th>Created at</th>
                    <th>Created by</th>
                    <th>Technician</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@_errand.Title</td>
                    <td>@_errand.Description</td>
                    <td>
                        <select value="@SelectedStatus" @onchange="@ChangeStatus">
                            @foreach (var status in StatusList)
                            {
                                if (_errand.Status == status)
                                {
                                    <option selected value="@status.ToString()">@status.ToString()</option>
                                }
                                else
                                {
                                    <option value="@status.ToString()">@status.ToString()</option>
                                }
                            }
                        </select>
                    </td>
                    <td>@_errand.LastEdited.ToString("d")</td>
                    <td>@_errand.CreatedAt.ToString("d")</td>
                    <td>@_errand.CreatedBy</td>
                    <td>@_errand.Technician.Name</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="table-responsive">
        <h3>Comments</h3>
        <table class="table">
            <thead>
                <tr>
                    <th class="col-8">Comment</th>
                    <th class="col-2">Author</th>
                    <th class="col-2">Posted</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var comment in _comments.OrderByDescending(c => c.PostedAt).Take(5))
                {
                    <tr>
                        <td class="col-8">@comment.Content</td>
                        <td class="col-2">@comment.Author.Name</td>
                        <td class="col-2">@comment.PostedAt.ToString("d")</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="mx-auto">
            <form method="post" class="form-control">
                <div class="text-center">
                    <textarea @bind="Content" class="form-control mt-3" placeholder="Write comment here..."></textarea>
                    <button @onclick="AddComment" class="mt-3 mb-3 btn btn-primary" type="submit">Save</button>
                </div>
            </form>
        </div>
    </div>
}

@code {

    public string Content;

    [Parameter]
    public string ErrandId { get; set; }

    ErrandModel _errand;

    public ErrandStatus SelectedStatus;

    List<ErrandStatus> StatusList = Enum.GetValues(typeof(ErrandStatus)).Cast<ErrandStatus>().ToList();

    List<CommentViewModel> _comments;

    protected override async Task OnInitializedAsync()
    {
        _errand = await ErrandService.GetErrandByIdAsync(ErrandId);
        _comments = new List<CommentViewModel>();

        foreach (var comment in _errand.Comments)
        {
            var commentViewModel = new CommentViewModel
            {
                Id = comment.Id,
                Author = await TechnicianService.GetTechnicianByIdAsync(_errand.Technician.Id.ToString()),
                Content = comment.Content,
                PostedAt = comment.PostedAt
            };
            _comments.Add(commentViewModel);
        }
    }

    public void ReturnToMyErrands()
    {
        Navigation.NavigateTo($"MyErrands/{_errand.Technician.Id.ToString()}");
    }

    public async void AddComment()
    {
        var commentModel = new CreateErrandCommentModel
        {
            Id = Guid.NewGuid(),
            Author = _errand.Technician.Id,
            Content = Content,
            PostedAt = DateTime.Parse(DateTime.Now.ToString("G")),
            ErrandId = _errand.Id
        };

        var statusCode = await CommentService.SaveCommentAsync(commentModel);

        if (statusCode.ToString() == "OK")
        {
            await OnInitializedAsync();
            await App.Current.MainPage.DisplayAlert("Success", "Comment was saved", "Ok");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Failed to save comment", "Ok");
        }
    }

    public async void ChangeStatus(ChangeEventArgs e)
    {
        var statusCode = await ErrandService.UpdateStatusAsync(ErrandId, e.Value.ToString());

        if (statusCode.ToString() == "OK")
        {
            await OnInitializedAsync();
            await App.Current.MainPage.DisplayAlert("Success", "Status was updated", "Ok");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Statusupdate not succeed", "Ok");
        }
    }
}